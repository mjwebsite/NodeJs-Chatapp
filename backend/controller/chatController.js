

const asyncHandler = require('express-async-handler');
const { findError, findChat, findAllOnly, findAll } = require("./controller");
const { Op } = require("sequelize");
const { User, Chat, profile } = require('../models');

const accessChat = asyncHandler(async (req, res, next) => {
    const { username } = req.body
    if (!username) {
        let err = await findError("DetailsMandatory");
        return next(err);
    }
    let users = await findAll("User", {
        "where": {
            "id": [req.userId, username]
        }
    });

    if (!users.count || users.count != 2) {
        let err = await findError("Inavlid_User");
        return next(err);
    }
    const chat = await findChat(req.userId, username);
    if (!chat) {
        const chat = await Chat.create({
            isGroupChat: false, // It's a one-on-one chat
            participants: [req.userId, username], // Add both users as participants
        });

        // Step 2: Add users to the chat (many-to-many relationship)
        await chat.setUsers([req.userId, username]); // This assumes setUsers is the method generated by the many-to-many association


        return res.send(chat);
    }
    // if (chat) {
    //     const message = await Message.create({
    //         content: "Hello world2", // Content of the message
    //         senderId: req.userId, // The sender of the first message
    //         chatId: chat.id, // Associate the message with the newly created chat
    //     });
    //     const readBy = await message.setReadByUsers([username]);
    //     return res.send(chat, message,readBy);
    // }
    return res.send(chat);

});

const fetchChats = asyncHandler(async (req, res, next) => {
    if (!req.userId) {
        let err = await findError("Inavlid_User");
        return next(err);
    }
    let chat = await findAllOnly("Chat", {
        "where": {
            "participants": { [Op.contains]: [req.userId] }
        },
        order: [['updatedAt', 'DESC']],
        attributes: ["id","chatName","latestMessage"],
        include: [
            {
                model: User,
                as: 'users',
                "where": {
                    "id": { [Op.notIn]: [req.userId] }
                },
                attributes: ['id'],
                include: [{ model: profile, attributes: ['name', 'image'], }]
            }
        ]
    });

    return res.send(chat);
})

module.exports = {
    accessChat: accessChat,
    fetchChats: fetchChats
}